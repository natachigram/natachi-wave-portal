{"version":3,"sources":["App.js","index.js"],"names":["App","useState","msg","setMsg","waveMsg","setWaveMsg","added","setAdded","loading","setLoading","setOverallWaves","allWaves","setAllWaves","contractAddress","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contractABI","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","message","console","log","useEffect","onNewWave","from","prevState","on","off","abi","currentAccount","setCurrentAccount","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","className","role","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","disabled","id","onClick","src","alt","index","key","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb2b8be8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport './App.css';\r\nimport abi from './utils/wavePortal.json';\r\n\r\nconst App = () => {\r\n  const [msg, setMsg] = useState('');\r\n  const [waveMsg, setWaveMsg] = useState('');\r\n  const [added, setAdded] = useState(false);\r\n  //loading state when mining\r\n  const [loading, setLoading] = useState(false);\r\n  //display numbers of wave\r\n  const [overallWaves, setOverallWaves] = useState(0);\r\n\r\n  /*\r\n   * All state property to store all waves\r\n   */\r\n  const [allWaves, setAllWaves] = useState([]);\r\n  //variable to hold contract Address\r\n  const contractAddress = '0x6A88991909d704aC69412b26f4C7345AED112E87';\r\n\r\n  const getAllWaves = async () => {\r\n    const { ethereum } = window;\r\n\r\n    try {\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n        const wavesCleaned = waves.map((wave) => {\r\n          return {\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n          };\r\n        });\r\n\r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let wavePortalContract;\r\n\r\n    const onNewWave = (from, timestamp, message) => {\r\n      console.log('NewWave', from, timestamp, message);\r\n      setAllWaves((prevState) => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      wavePortalContract = new ethers.Contract(\r\n        contractAddress,\r\n        contractABI,\r\n        signer\r\n      );\r\n      wavePortalContract.on('NewWave', onNewWave);\r\n    }\r\n\r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off('NewWave', onNewWave);\r\n      }\r\n    };\r\n  }, []);\r\n  //contract abi\r\n  const contractABI = abi.abi;\r\n\r\n  //state variable to store our user's public wallet\r\n  const [currentAccount, setCurrentAccount] = useState('');\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      /*\r\n       * First make sure we have access to window.ethereum\r\n       */\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log('Make sure you have metamask!');\r\n      } else {\r\n        console.log('We have the ethereum object', ethereum);\r\n      }\r\n\r\n      //checking if we are allowed to access the users account\r\n\r\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log('Found an authorized account', account);\r\n        setCurrentAccount(account);\r\n        getAllWaves();\r\n      } else {\r\n        console.log('No authorized account found');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  //implementing connect wallet method\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert('Get Metamask!');\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      });\r\n      console.log('connected', accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const wave = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log('Retrieved total wave count...', count.toNumber());\r\n\r\n        /*\r\n         * Execute the actual wave from your smart contract\r\n         */\r\n        const waveTxn = await wavePortalContract.wave(waveMsg, {\r\n          gasLimit: 300000,\r\n        });\r\n        setLoading(true);\r\n        console.log('Mining...', waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        console.log('Mined -- ', waveTxn.hash);\r\n        setLoading(false);\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log('Retrieved total wave count...', count.toNumber());\r\n        setOverallWaves(count.toNumber());\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleMsgChange = (e) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  //handling messsage inputs and submitting\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setWaveMsg(msg);\r\n\r\n    console.log(msg);\r\n    setMsg('');\r\n    setAdded(true);\r\n  };\r\n\r\n  /*\r\n   * This runs our function when the page loads.\r\n   */\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='mainContainer'>\r\n      <div className='dataContainer'>\r\n        <div className='header'>\r\n          <span role='img'>👋</span> Hey there!\r\n        </div>\r\n\r\n        <div className='bio'>\r\n          Hello, my name is Natachi. I am a web3 developer I am specializing in\r\n          building exceptional digital experiences. Currently, I am focused on\r\n          building accessible, human-centered products on the blockchain.\r\n        </div>\r\n\r\n        <div className='msg-container'>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type='text'\r\n              placeholder='Enter message'\r\n              value={msg}\r\n              onChange={handleMsgChange}\r\n            />\r\n            {added ? (\r\n              <button disabled>Added to wave</button>\r\n            ) : msg === '' ? (\r\n              <button disabled id='empty'>\r\n                Enter message\r\n              </button>\r\n            ) : (\r\n              <button>Add to wave</button>\r\n            )}\r\n          </form>\r\n        </div>\r\n\r\n        {currentAccount && (\r\n          <button className='waveButton' onClick={wave}>\r\n            {loading ? (\r\n              <img\r\n                className='loader'\r\n                src='https://c.tenor.com/NqKNFHSmbssAAAAi/discord-loading-dots-discord-loading.gif'\r\n                alt='loader'\r\n              />\r\n            ) : (\r\n              ' Wave at Me'\r\n            )}\r\n          </button>\r\n        )}\r\n\r\n        {!currentAccount && (\r\n          <button className='waveButton connect-btn' onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => {\r\n          return (\r\n            <div key={index} className='wave-msgs'>\r\n              <div>\r\n                <span>Address:</span> {wave.address}\r\n              </div>\r\n              <div>\r\n                <span>Time:</span> {wave.timestamp.toString()}\r\n              </div>\r\n              <div>\r\n                <span>Message:</span> {wave.message}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}